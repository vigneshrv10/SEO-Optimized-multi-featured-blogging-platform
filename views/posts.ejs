<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>posts</title>
    <link rel="stylesheet" href="/css/home-style.css" />
    <link rel="stylesheet" href="/css/post-style.css" />
    <script src="https://kit.fontawesome.com/eabac940d1.js"
      crossorigin="anonymous"
    ></script>
    <% 
    // Helper function to format date for feedback
    function formatDate(date) {
      const now = new Date();
      const feedbackDate = new Date(date);
      const diffTime = Math.abs(now - feedbackDate);
      const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
      
      if (diffDays === 0) {
        const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
        if (diffHours === 0) {
          const diffMinutes = Math.floor(diffTime / (1000 * 60));
          if (diffMinutes === 0) {
            return "Just now";
          } else if (diffMinutes === 1) {
            return "1 minute ago";
          } else {
            return `${diffMinutes} minutes ago`;
          }
        } else if (diffHours === 1) {
          return "1 hour ago";
        } else {
          return `${diffHours} hours ago`;
        }
      } else if (diffDays === 1) {
        return "1 day ago";
      } else {
        return `${diffDays} days ago`;
      }
    }
    %>
  </head>
  <body>
    <nav>
      <div class="logo"><a href="/home">myBlog</a></div>
      <div class="nav-items">
        <ul>
          <li><a href="/home"> Home</a></li>
          <% if(user==="admin"){ %>
                <li> <a href="/admin">Dashboard</a></li>
                <% }else{%>
                    <li> <a href="/profile/<%=user %>"> My profile</a></li>
                    <% }%>
          <li><a href="/logout"> Logout</a></li>
        </ul>
      </div>
    </nav>
    <main>
      <% posts.forEach((posts)=>{ %>
        <% if(posts.id===id){ %>
      <div class="main-section">
        <% if(!posts.thumbnail){var height="style=height:0"} %>
        <div class="image-section" <%= height %> >
          <a href="/thumbnails/<%= posts.thumbnail %>"> <img src="/thumbnails/<%= posts.thumbnail %>" alt="" /></a>

        </div>
        <div class="heading-section">
          <h1><%= posts.title %></h1>
        </div>
        <div class="date-time-section">
          <div>
             <% var days=Math.round((date-posts.date)/86400000)
                    if(days===0){
                       days=Math.round((date-posts.date)/3600000)
                       if(days===0){
                        days=Math.round((date-posts.date)/60000)
                        if(days===0){
                            days="Just now"
                        }else if(days===1){
                            days="1 minute ago"
                        }else{
                            days=days+" minutes ago"
                        }
                       }else if(days===1){
                        days="1 hour ago"
                       }else{
                        days=days+" hours ago"
                       }
                    }
                    else if(days===1){
                        days="1 day ago"
                    }
                    else{
                        days=days+" days ago"
                    } %>
            <p>
              <!-- 27/04/2020 &nbsp;â€¢&nbsp; -->
              <span> By</span><a href="/profile/<%=posts.author%>" class="username-text" ><%=posts.author%></a><span>Published </span> <%= days %> 

            </p>
             
               <% if(posts.author===user || user==="admin"){ %>
                <div class="post-actions">
                    <a href="/update/<%= posts._id %>" class="edit-btn">
                        <i class="fa-solid fa-pen"></i>
                        <span>Edit Post</span>
                    </a>
                    <a href="/delete/<%= posts._id %>" class="delete-btn">
                        <i class="fa-solid fa-trash"></i>
                        <span>Delete</span>
                    </a>
                </div>
              <% }%>
            
          </div>
          <div class="action-buttons">
            <% const red ="red" %>
            <% const white ="whit" %>
            <% var liked=0%>
            
            <p class="like-button" onclick="lcupdate()">
              <button onclick="like(this)" class="white 
              <% if(posts.likedby.includes(user)){ liked=1%> 
                <%= red %>
                <% } %>" >
              <i class="fa-sharp fa-solid fa-heart"></i></button> <span id="likecount"><%=posts.like%></span> likes
            </p>
            <button onclick="summarizePost('<%= posts._id %>')" class="summarize-btn">
              <i class="fa-solid fa-wand-magic-sparkles"></i> Summarize
            </button>
            <div class="read-controls">
              <button onclick="toggleReading()" class="read-btn">
                <i class="fa-solid fa-volume-high"></i> Read Aloud
              </button>
              <div class="read-options" style="display: none;">
                <div class="control-group">
                  <label>Speed:</label>
                  <input type="range" id="speed-control" min="0.5" max="2" step="0.1" value="1" onchange="updateSpeed(this.value)">
                  <span id="speed-value">1x</span>
                </div>
                <div class="control-group">
                  <label>Voice:</label>
                  <select id="voice-select" onchange="updateVoice(this.value)"></select>
                </div>
                <div class="control-group">
                  <label>Read Order:</label>
                  <select id="read-order" onchange="updateReadOrder(this.value)">
                    <option value="content-first">Content First</option>
                    <option value="summary-first">Summary First</option>
                  </select>
                </div>
                <div class="playback-controls">
                  <button onclick="pauseReading()" class="control-btn" id="pause-btn" disabled>
                    <i class="fa-solid fa-pause"></i>
                  </button>
                  <button onclick="resumeReading()" class="control-btn" id="resume-btn" disabled>
                    <i class="fa-solid fa-play"></i>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="content-section"><%= posts.content %></div>
        <div id="summary-section" class="summary-section" style="display: none;">
          <h3>Summary</h3>
          <p id="summary-content"></p>
        </div>

        <!-- Feedback Section -->
        <div class="feedback-section">
          <h3>Feedback</h3>
          <div class="feedback-form">
            <textarea id="feedback-input" placeholder="Share your thoughts about this blog post..."></textarea>
            <button id="submit-feedback" onclick="submitFeedback('<%= posts._id %>')">Submit Feedback</button>
          </div>
          <div id="feedback-error" class="feedback-error"></div>
          <div class="feedback-list">
            <% if (typeof feedback !== 'undefined' && feedback.length > 0) { %>
              <% feedback.forEach(item => { %>
                <div class="feedback-item">
                  <div class="feedback-header">
                    <span class="feedback-author"><%= item.username %></span>
                    <span class="feedback-date"><%= formatDate(item.date) %></span>
                  </div>
                  <div class="feedback-content"><%= item.feedback %></div>
                </div>
              <% }); %>
            <% } else { %>
              <div class="no-feedback">No feedback yet. Be the first to share your thoughts!</div>
            <% } %>
          </div>
        </div>

        <span id="likedcheck" style="display: none;"><%= liked %></span>

      <% } }) %>

      <div class="related-posts-section">
        <% posts.reverse().forEach((posts)=>{ %>
         <% if(posts.id!=id){ %>
          <a href="/posts/<%=posts._id %>" class="related-card">
          <img src="/thumbnails/<%= posts.thumbnail %>" onerror="this.onerror=null; this.src='/images/default-image.png'" alt="" />
          <div>
            <h1><%= posts.title %></h1>
            <p><%= posts.author%></p>
          </div>
      </a>
        <% } }) %>
      </div>
    </main>
    <form action="" method="post" id="lcform" style="display: none;">
      <input type="text" name="likecount" id="lc" onchange="this.form.submit()">
      <input type="submit" id="submit">
    </form>

    <style>
      /* Main Section Enhancement */
      .main-section {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        background: var(--bg-primary, #fff);
      }

      /* Image Section Enhancement */
      .image-section {
        width: 100%;
        max-height: 500px;
        overflow: hidden;
        border-radius: 1rem;
        margin-bottom: 2rem;
      }

      .image-section img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      /* Content Section Enhancement */
      .content-section {
        text-align: left;
        line-height: 1.8;
        font-size: 1.125rem;
        color: var(--text-primary, #2d3748);
        margin: 2rem auto;
        max-width: 800px;
        padding: 0 1rem;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      }

      .content-section p {
        margin-bottom: 1.5rem;
        white-space: pre-wrap;
      }

      .content-section h1,
      .content-section h2,
      .content-section h3,
      .content-section h4,
      .content-section h5,
      .content-section h6 {
        color: var(--text-primary, #1a202c);
        margin: 2rem 0 1rem;
        line-height: 1.3;
        font-weight: 700;
      }

      .content-section h1 { font-size: 2rem; }
      .content-section h2 { font-size: 1.75rem; }
      .content-section h3 { font-size: 1.5rem; }
      .content-section h4 { font-size: 1.25rem; }

      .content-section ul,
      .content-section ol {
        margin: 1.5rem 0;
        padding-left: 2rem;
      }

      .content-section li {
        margin-bottom: 0.5rem;
      }

      .content-section blockquote {
        margin: 1.5rem 0;
        padding: 1rem 1.5rem;
        border-left: 4px solid var(--primary, #4F46E5);
        background: var(--bg-secondary, #f8f9fa);
        border-radius: 0.5rem;
        font-style: italic;
        color: var(--text-secondary, #4a5568);
      }

      .content-section code {
        background: var(--bg-secondary, #f8f9fa);
        padding: 0.2rem 0.4rem;
        border-radius: 0.25rem;
        font-family: monospace;
        font-size: 0.9em;
        color: var(--primary, #4F46E5);
      }

      .content-section pre {
        background: var(--bg-secondary, #f8f9fa);
        padding: 1rem;
        border-radius: 0.5rem;
        overflow-x: auto;
        margin: 1.5rem 0;
      }

      .content-section pre code {
        background: none;
        padding: 0;
        color: inherit;
      }

      .content-section img {
        max-width: 100%;
        height: auto;
        border-radius: 0.5rem;
        margin: 1.5rem 0;
      }

      .content-section a {
        color: var(--primary, #4F46E5);
        text-decoration: none;
        border-bottom: 1px solid transparent;
        transition: border-color 0.3s ease;
      }

      .content-section a:hover {
        border-bottom-color: var(--primary, #4F46E5);
      }

      /* Date Time Section Enhancement */
      .date-time-section {
        margin: 1rem 0 2rem;
        padding: 1rem 0;
        border-bottom: 1px solid var(--border-color, #e5e7eb);
      }

      .date-time-section p {
        color: var(--text-secondary, #6b7280);
        font-size: 0.95rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        flex-wrap: wrap;
      }

      .username-text {
        color: var(--primary, #4F46E5);
        font-weight: 600;
        text-decoration: none;
        transition: color 0.3s ease;
      }

      .username-text:hover {
        color: var(--primary-dark, #4338CA);
      }

      /* Dark Mode Enhancements */
      @media (prefers-color-scheme: dark) {
        .content-section {
          color: var(--text-primary, #e2e8f0);
        }

        .content-section blockquote {
          background: rgba(255, 255, 255, 0.05);
        }

        .content-section code {
          background: rgba(255, 255, 255, 0.1);
        }

        .content-section pre {
          background: rgba(255, 255, 255, 0.05);
        }
      }

      /* Responsive Design Improvements */
      @media (max-width: 768px) {
        .main-section {
          padding: 1rem;
        }

        .content-section {
          font-size: 1rem;
          padding: 0 0.5rem;
        }

        .content-section h1 { font-size: 1.75rem; }
        .content-section h2 { font-size: 1.5rem; }
        .content-section h3 { font-size: 1.25rem; }
        .content-section h4 { font-size: 1.1rem; }
      }

      /* Enhanced Typography */
      .content-section {
        text-align: justify;
        line-height: 1.8;
        font-size: 1.1rem;
        color: var(--text-primary, #333);
        margin: 2rem 0;
        max-width: 800px;
        margin-left: auto;
        margin-right: auto;
      }

      .content-section p {
        margin-bottom: 1.5rem;
      }

      .heading-section h1 {
        font-size: 2.5rem;
        font-weight: 800;
        color: var(--text-primary, #1a1a1a);
        line-height: 1.3;
        margin: 1.5rem 0;
        text-align: left;
      }

      /* Enhanced Button Animations */
      .action-buttons {
        display: flex;
        align-items: center;
        gap: 1.25rem;
        margin: 1.5rem 0;
        flex-wrap: wrap;
      }

      .action-buttons button {
        position: relative;
        overflow: hidden;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        transform-origin: center;
      }

      .action-buttons button:hover {
        transform: translateY(-2px);
      }

      .action-buttons button::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.2);
        transform: translate(-50%, -50%) scale(0);
        border-radius: inherit;
        transition: transform 0.3s ease;
      }

      .action-buttons button:active::after {
        transform: translate(-50%, -50%) scale(2);
      }

      .like-button button {
        padding: 0.75rem;
        border-radius: 50%;
        border: none;
        background: transparent;
        cursor: pointer;
        font-size: 1.25rem;
        color: #666;
        transition: all 0.3s ease;
      }

      .like-button button:hover {
        transform: scale(1.15);
      }

      .like-button button.red {
        color: #ff4757;
      }

      .summarize-btn {
        background: linear-gradient(135deg, #4F46E5, #4338CA);
        color: white;
        padding: 0.75rem 1.25rem;
        border-radius: 0.75rem;
        border: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        font-weight: 600;
        box-shadow: 0 4px 6px rgba(79, 70, 229, 0.2);
      }

      .summarize-btn:hover {
        background: linear-gradient(135deg, #4338CA, #3730A3);
        box-shadow: 0 6px 12px rgba(79, 70, 229, 0.3);
      }

      .read-btn {
        background: linear-gradient(135deg, #10B981, #059669);
        color: white;
        padding: 0.75rem 1.25rem;
        border-radius: 0.75rem;
        border: none;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
        font-weight: 600;
        box-shadow: 0 4px 6px rgba(16, 185, 129, 0.2);
      }

      .read-btn:hover {
        background: linear-gradient(135deg, #059669, #047857);
        box-shadow: 0 6px 12px rgba(16, 185, 129, 0.3);
      }

      /* Post Actions Enhancement */
      .post-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
      }

      .post-actions a {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
      }

      .edit-btn {
        background: #f3f4f6;
        color: #4b5563;
      }

      .edit-btn:hover {
        background: #e5e7eb;
        transform: translateY(-2px);
      }

      .delete-btn {
        background: #fee2e2;
        color: #ef4444;
      }

      .delete-btn:hover {
        background: #fecaca;
        transform: translateY(-2px);
      }

      /* Related Posts Enhancement */
      .related-posts-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
        margin-top: 3rem;
        padding: 2rem;
        background: var(--bg-secondary, #f8f9fa);
        border-radius: 1rem;
      }

      .related-card {
        background: white;
        border-radius: 1rem;
        overflow: hidden;
        text-decoration: none;
        color: inherit;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      }

      .related-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
      }

      .related-card img {
        width: 100%;
        height: 200px;
        object-fit: cover;
      }

      .related-card div {
        padding: 1.5rem;
      }

      .related-card h1 {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--text-primary, #1a1a1a);
      }

      .related-card p {
        color: var(--text-secondary, #666);
        font-size: 0.875rem;
      }

      /* Feedback Section Enhancement */
      .feedback-section {
        margin-top: 3rem;
        padding: 2rem;
        background: var(--bg-secondary, #f8f9fa);
        border-radius: 1rem;
      }

      .feedback-section h3 {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: var(--text-primary, #1a1a1a);
      }

      .feedback-form textarea {
        width: 100%;
        min-height: 120px;
        padding: 1rem;
        border: 2px solid var(--border-color, #e5e7eb);
        border-radius: 0.75rem;
        margin-bottom: 1rem;
        font-size: 1rem;
        transition: all 0.3s ease;
      }

      .feedback-form textarea:focus {
        border-color: var(--primary, #4F46E5);
        outline: none;
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
      }

      #submit-feedback {
        background: linear-gradient(135deg, var(--primary, #4F46E5), var(--primary-dark, #4338CA));
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 0.75rem;
        border: none;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      #submit-feedback:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(79, 70, 229, 0.2);
      }

      .feedback-item {
        background: white;
        padding: 1.5rem;
        border-radius: 0.75rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      }

      .feedback-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
      }

      .feedback-author {
        font-weight: 600;
        color: var(--text-primary, #1a1a1a);
      }

      .feedback-date {
        color: var(--text-secondary, #666);
        font-size: 0.875rem;
      }

      .feedback-content {
        color: var(--text-primary, #333);
        line-height: 1.6;
      }

      /* Dark Mode Support */
      @media (prefers-color-scheme: dark) {
        :root {
          --text-primary: #f3f4f6;
          --text-secondary: #9ca3af;
          --bg-primary: #1a1a1a;
          --bg-secondary: #2a2a2a;
          --border-color: #374151;
        }

        .related-card {
          background: var(--bg-primary);
        }

        .feedback-item {
          background: var(--bg-primary);
        }
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .heading-section h1 {
          font-size: 2rem;
        }

        .content-section {
          font-size: 1rem;
          padding: 0 1rem;
        }

        .action-buttons {
          justify-content: center;
        }

        .related-posts-section {
          padding: 1rem;
        }
      }

      /* Summary Section Enhancement */
      .summary-section {
        margin: 2rem 0;
        padding: 1.5rem;
        background: linear-gradient(135deg, var(--primary), var(--accent));
        border: none;
        border-radius: 1rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }

      .summary-section h3 {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: white;
        font-size: 1.25rem;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid rgba(255, 255, 255, 0.2);
      }

      .summary-section h3 i {
        font-size: 1.1em;
      }

      .summary-content {
        color: white;
        line-height: 1.8;
        font-size: 1.05rem;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 0.5rem;
      }

      .summary-section.loading {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 150px;
      }

      .summary-spinner {
        width: 40px;
        height: 40px;
        border: 3px solid rgba(255, 255, 255, 0.2);
        border-top-color: white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }

      /* Dark Mode Support for Summary Section */
      @media (prefers-color-scheme: dark) {
        .summary-section {
          background: linear-gradient(135deg, var(--primary-dark), var(--accent));
        }

        .summary-content {
          background: rgba(0, 0, 0, 0.2);
        }
      }
    </style>

    <script>
      
      var fcount
      var likedstatus=parseInt(document.getElementById("likedcheck").innerHTML)
      function like(x) {
        x.classList.toggle("red");
        var count=parseInt(document.getElementById("likecount").innerHTML)
        if(likedstatus===0){
        document.getElementById("likecount").innerHTML=count+1
        fcount=parseInt(document.getElementById("likecount").innerHTML)
        x.classList.add("white")
        likedstatus=1
        }
        else{
          document.getElementById("likecount").innerHTML=count-1
          likedstatus=0
        }
        }
       function lcupdate(){
        document.getElementById("lc").value=fcount
        document.getElementById("submit").click()

       }

       async function summarizePost(postId) {
         const summarySection = document.getElementById('summary-section');
         const summaryContent = document.getElementById('summary-content');
         const summarizeBtn = document.querySelector('.summarize-btn');
         
         // Show loading state
         summarizeBtn.innerHTML = '<div id="loading-spinner"></div>Summarizing...';
         summarizeBtn.disabled = true;
         summarySection.style.display = 'none';
         
         try {
           console.log('Sending request to summarize post:', postId);
           const response = await fetch(`/summarize/${postId}`, {
             method: 'POST',
             headers: {
               'Content-Type': 'application/json'
             }
           });
           
           const data = await response.json();
           console.log('Received response:', data);
           
           if (!response.ok) {
             throw new Error(data.error || 'Failed to generate summary');
           }
           
           if (!data.summary) {
             throw new Error('No summary was generated');
           }
           
           summaryContent.textContent = data.summary;
           summarySection.style.display = 'block';
         } catch (error) {
           console.error('Summarization error:', error);
           const errorMessage = error.message.includes('Gemini API Error') 
             ? error.message 
             : 'Failed to generate summary. Please try again.';
           alert(`Error: ${errorMessage}`);
         } finally {
           // Restore button state
           summarizeBtn.innerHTML = '<i class="fa-solid fa-wand-magic-sparkles"></i> Summarize';
           summarizeBtn.disabled = false;
         }
       }

       let speechSynthesis = window.speechSynthesis;
       let currentUtterance = null;
       let isReading = false;
       let selectedVoice = null;
       let readingSpeed = 1;
       let readOrder = 'content-first';
       let isPaused = false;

       function initializeVoices() {
         const voiceSelect = document.getElementById('voice-select');
         voiceSelect.innerHTML = '';
         
         const voices = speechSynthesis.getVoices();
         voices.forEach((voice, index) => {
           const option = document.createElement('option');
           option.value = index;
           option.textContent = `${voice.name} (${voice.lang})`;
           voiceSelect.appendChild(option);
         });

         if (voices.length > 0) {
           selectedVoice = voices[0];
         }
       }

       if (speechSynthesis.onvoiceschanged !== undefined) {
         speechSynthesis.onvoiceschanged = initializeVoices;
       }

       function toggleReadOptions() {
         const options = document.querySelector('.read-options');
         options.style.display = options.style.display === 'none' ? 'block' : 'none';
       }

       function updateSpeed(value) {
         readingSpeed = value;
         document.getElementById('speed-value').textContent = `${value}x`;
         if (currentUtterance) {
           currentUtterance.rate = value;
         }
       }

       function updateVoice(index) {
         const voices = speechSynthesis.getVoices();
         selectedVoice = voices[index];
       }

       function updateReadOrder(value) {
         readOrder = value;
       }

       function toggleReading() {
         const readBtn = document.querySelector('.read-btn');
         const pauseBtn = document.getElementById('pause-btn');
         const resumeBtn = document.getElementById('resume-btn');
         
         if (isReading) {
           stopReading();
         } else {
           startReading();
           toggleReadOptions();
         }
       }

       function startReading() {
         isReading = true;
         isPaused = false;
         const readBtn = document.querySelector('.read-btn');
         readBtn.innerHTML = '<i class="fa-solid fa-volume-xmark"></i> Stop Reading';
         readBtn.classList.add('reading');
         
         const title = document.querySelector('.heading-section h1').textContent;
         const content = document.querySelector('.content-section').textContent;
         const summarySection = document.getElementById('summary-section');
         const summary = summarySection.style.display !== 'none' 
           ? document.getElementById('summary-content').textContent 
           : '';

         let textToRead = '';
         if (readOrder === 'summary-first' && summary) {
           textToRead = `Title: ${title}. Summary: ${summary}. Full Content: ${content}`;
         } else {
           textToRead = `Title: ${title}. ${content}`;
           if (summary) {
             textToRead += ` Summary: ${summary}`;
           }
         }

         const chunks = splitTextIntoChunks(textToRead);
         readChunks(chunks, 0);
         
         document.getElementById('pause-btn').disabled = false;
         document.getElementById('resume-btn').disabled = true;
       }

       function stopReading() {
         speechSynthesis.cancel();
         isReading = false;
         isPaused = false;
         const readBtn = document.querySelector('.read-btn');
         readBtn.innerHTML = '<i class="fa-solid fa-volume-high"></i> Read Aloud';
         readBtn.classList.remove('reading');
         document.getElementById('pause-btn').disabled = true;
         document.getElementById('resume-btn').disabled = true;
       }

       function pauseReading() {
         if (isReading && !isPaused) {
           speechSynthesis.pause();
           isPaused = true;
           document.getElementById('pause-btn').disabled = true;
           document.getElementById('resume-btn').disabled = false;
         }
       }

       function resumeReading() {
         if (isReading && isPaused) {
           speechSynthesis.resume();
           isPaused = false;
           document.getElementById('pause-btn').disabled = false;
           document.getElementById('resume-btn').disabled = true;
         }
       }

       function readChunks(chunks, index) {
         if (index >= chunks.length || !isReading) {
           stopReading();
           return;
         }

         const utterance = new SpeechSynthesisUtterance(chunks[index]);
         utterance.rate = readingSpeed;
         utterance.pitch = 1;
         utterance.volume = 1;
         
         if (selectedVoice) {
           utterance.voice = selectedVoice;
         }

         utterance.onend = () => {
           if (isReading && !isPaused) {
             readChunks(chunks, index + 1);
           }
         };

         utterance.onerror = (event) => {
           console.error('Speech synthesis error:', event);
           stopReading();
         };

         currentUtterance = utterance;
         speechSynthesis.speak(utterance);
       }

       function splitTextIntoChunks(text, maxLength = 200) {
         const chunks = [];
         const sentences = text.match(/[^.!?]+[.!?]+/g) || [text];
         let currentChunk = '';

         sentences.forEach(sentence => {
           if ((currentChunk + sentence).length > maxLength) {
             chunks.push(currentChunk);
             currentChunk = sentence;
           } else {
             currentChunk += sentence;
           }
         });

         if (currentChunk) {
           chunks.push(currentChunk);
         }

         return chunks;
       }

       // Stop reading when navigating away
       window.addEventListener('beforeunload', () => {
         if (isReading) {
           speechSynthesis.cancel();
         }
       });

       // Feedback functionality
       async function submitFeedback(postId) {
         const feedbackInput = document.getElementById('feedback-input');
         const feedbackError = document.getElementById('feedback-error');
         const feedback = feedbackInput.value.trim();
         
         // Clear previous error
         feedbackError.style.display = 'none';
         
         if (!feedback) {
           feedbackError.textContent = 'Please enter your feedback';
           feedbackError.style.display = 'block';
           return;
         }
         
         try {
           const response = await fetch(`/feedback/${postId}`, {
             method: 'POST',
             headers: {
               'Content-Type': 'application/json',
             },
             body: JSON.stringify({ feedback }),
           });
           
           const data = await response.json();
           
           if (!response.ok) {
             throw new Error(data.error || 'Failed to submit feedback');
           }
           
           // Add the new feedback to the list
           const feedbackList = document.querySelector('.feedback-list');
           const noFeedback = document.querySelector('.no-feedback');
           
           if (noFeedback) {
             noFeedback.remove();
           }
           
           const newFeedback = document.createElement('div');
           newFeedback.className = 'feedback-item';
           newFeedback.innerHTML = `
             <div class="feedback-header">
               <span class="feedback-author">${data.feedback.username}</span>
               <span class="feedback-date">${data.feedback.formattedDate}</span>
             </div>
             <div class="feedback-content">${data.feedback.feedback}</div>
           `;
           
           feedbackList.prepend(newFeedback);
           
           // Clear the input
           feedbackInput.value = '';
           
         } catch (error) {
           console.error('Error submitting feedback:', error);
           feedbackError.textContent = error.message || 'An error occurred while submitting feedback';
           feedbackError.style.display = 'block';
         }
       }
    </script>
  </body>
</html>
